#!/usr/bin/env python
# coding: utf-8

# # Workspace for Project Euler problems
# 
# ## Problem 8
# 
# The four adjacent digits in the 1000-digit number that have the greatest product are $9 × 9 × 8 × 9 = 5832$.
# 
# `73167176531330624919225119674426574742355349194934
# 96983520312774506326239578318016984801869478851843
# 85861560789112949495459501737958331952853208805511
# 12540698747158523863050715693290963295227443043557
# 66896648950445244523161731856403098711121722383113
# 62229893423380308135336276614282806444486645238749
# 30358907296290491560440772390713810515859307960866
# 70172427121883998797908792274921901699720888093776
# 65727333001053367881220235421809751254540594752243
# 52584907711670556013604839586446706324415722155397
# 53697817977846174064955149290862569321978468622482
# 83972241375657056057490261407972968652414535100474
# 82166370484403199890008895243450658541227588666881
# 16427171479924442928230863465674813919123162824586
# 17866458359124566529476545682848912883142607690042
# 24219022671055626321111109370544217506941658960408
# 07198403850962455444362981230987879927244284909188
# 84580156166097919133875499200524063689912560717606
# 05886116467109405077541002256983155200055935729725
# 71636269561882670428252483600823257530420752963450
# `
# 
# Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

# In[34]:


import tools.primetools as pt
import numbers
from functools import reduce


# In[2]:


numbertext='''
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450'''


# In[54]:


help(str.replace)
numbertext=numbertext.replace('\n', '')

#nl=list(numbertext)
nl = [int(x) for x in numbertext]

print (type(numbertext))

print (nl[0])
print (nl[1:4])
l=[1,2,3,4,5]
print (l[3:])
print (f"type of first item is: {type(nl[0])}")
g=(x for x in numbertext)
print(type(g))
print(len(numbertext))


# ## Approach
# 
# So obviously we should ignore any sequence that contains a 0. Need to factor in that logic

# In[52]:


def highestConsecutiveProduct(numlist, conseclength = 4):
    
    """Find the highest product of consecutive digits in a list.
    
    RETURNS:
        pos 0: the product
        pos 1: the beginning index of the number sequence
        pos 2: the subsequence itself"""
    
    if isinstance(numlist, numbers.Number):
        numlist=str(numlist)
    nl=[int(x) for x in numlist]
    
    if len(nl) < conseclength:
        raise Exception("the length of the sequences cannot be less         than the requested subsequence length")
        
    getsubseq=lambda idx: nl[idx-conseclength+1:idx+1]
    getprod=lambda idx: reduce((lambda x,y: x*y), getsubseq(idx))
    mx=0
    mxidx=-1
    largestss=[]
    # how many digits read since last 0 was encountered
    lastzero=0
    for i in range(0, len(nl)):
        nex=nl[i]
        if nex == 0:
            lastzero=0
        else:
            lastzero+=1
        if lastzero >= conseclength:
            prod=getprod(i)
            if prod > mx:
                mx=prod
                mxidx=i-conseclength+1
                largestss=getsubseq(i)
        
    return [mx, mxidx, largestss]


# In[56]:


ans, idx, seq = highestConsecutiveProduct(numbertext, 13)


# In[57]:


help(highestConsecutiveProduct)


# In[63]:


print(f"The answer is {ans}. The index of occurrence is {idx}. And the sequence is {seq}. Concatenated, it is {''.join(str(i) for i in seq)}.")

